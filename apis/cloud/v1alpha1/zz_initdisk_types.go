// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InitDiskInitParameters struct {
	MetaData *string `json:"metaData,omitempty" tf:"meta_data,omitempty"`

	NetworkConfig *string `json:"networkConfig,omitempty" tf:"network_config,omitempty"`

	PveNode *string `json:"pveNode,omitempty" tf:"pve_node,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	VendorData *string `json:"vendorData,omitempty" tf:"vendor_data,omitempty"`
}

type InitDiskObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MetaData *string `json:"metaData,omitempty" tf:"meta_data,omitempty"`

	NetworkConfig *string `json:"networkConfig,omitempty" tf:"network_config,omitempty"`

	PveNode *string `json:"pveNode,omitempty" tf:"pve_node,omitempty"`

	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	VendorData *string `json:"vendorData,omitempty" tf:"vendor_data,omitempty"`
}

type InitDiskParameters struct {

	// +kubebuilder:validation:Optional
	MetaData *string `json:"metaData,omitempty" tf:"meta_data,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkConfig *string `json:"networkConfig,omitempty" tf:"network_config,omitempty"`

	// +kubebuilder:validation:Optional
	PveNode *string `json:"pveNode,omitempty" tf:"pve_node,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// +kubebuilder:validation:Optional
	VendorData *string `json:"vendorData,omitempty" tf:"vendor_data,omitempty"`
}

// InitDiskSpec defines the desired state of InitDisk
type InitDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InitDiskParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InitDiskInitParameters `json:"initProvider,omitempty"`
}

// InitDiskStatus defines the observed state of InitDisk.
type InitDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InitDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InitDisk is the Schema for the InitDisks API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmox}
type InitDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pveNode) || (has(self.initProvider) && has(self.initProvider.pveNode))",message="spec.forProvider.pveNode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	Spec   InitDiskSpec   `json:"spec"`
	Status InitDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InitDiskList contains a list of InitDisks
type InitDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InitDisk `json:"items"`
}

// Repository type metadata.
var (
	InitDisk_Kind             = "InitDisk"
	InitDisk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InitDisk_Kind}.String()
	InitDisk_KindAPIVersion   = InitDisk_Kind + "." + CRDGroupVersion.String()
	InitDisk_GroupVersionKind = CRDGroupVersion.WithKind(InitDisk_Kind)
)

func init() {
	SchemeBuilder.Register(&InitDisk{}, &InitDiskList{})
}
