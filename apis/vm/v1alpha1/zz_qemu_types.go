// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	DiskFile *string `json:"diskFile,omitempty" tf:"disk_file,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Slot *string `json:"slot,omitempty" tf:"slot,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	DiskFile *string `json:"diskFile,omitempty" tf:"disk_file,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Slot *string `json:"slot,omitempty" tf:"slot,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	DiskFile *string `json:"diskFile,omitempty" tf:"disk_file,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Slot *string `json:"slot" tf:"slot,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type DisksInitParameters struct {
	Ide []IdeInitParameters `json:"ide,omitempty" tf:"ide,omitempty"`

	Sata []SataInitParameters `json:"sata,omitempty" tf:"sata,omitempty"`

	Scsi []ScsiInitParameters `json:"scsi,omitempty" tf:"scsi,omitempty"`

	Virtio []VirtioInitParameters `json:"virtio,omitempty" tf:"virtio,omitempty"`
}

type DisksObservation struct {
	Ide []IdeObservation `json:"ide,omitempty" tf:"ide,omitempty"`

	Sata []SataObservation `json:"sata,omitempty" tf:"sata,omitempty"`

	Scsi []ScsiObservation `json:"scsi,omitempty" tf:"scsi,omitempty"`

	Virtio []VirtioObservation `json:"virtio,omitempty" tf:"virtio,omitempty"`
}

type DisksParameters struct {

	// +kubebuilder:validation:Optional
	Ide []IdeParameters `json:"ide,omitempty" tf:"ide,omitempty"`

	// +kubebuilder:validation:Optional
	Sata []SataParameters `json:"sata,omitempty" tf:"sata,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi []ScsiParameters `json:"scsi,omitempty" tf:"scsi,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio []VirtioParameters `json:"virtio,omitempty" tf:"virtio,omitempty"`
}

type EfidiskInitParameters struct {
	Efitype *string `json:"efitype,omitempty" tf:"efitype,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type EfidiskObservation struct {
	Efitype *string `json:"efitype,omitempty" tf:"efitype,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type EfidiskParameters struct {

	// +kubebuilder:validation:Optional
	Efitype *string `json:"efitype,omitempty" tf:"efitype,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type HostpciInitParameters struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Pcie *float64 `json:"pcie,omitempty" tf:"pcie,omitempty"`

	Rombar *float64 `json:"rombar,omitempty" tf:"rombar,omitempty"`
}

type HostpciObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Pcie *float64 `json:"pcie,omitempty" tf:"pcie,omitempty"`

	Rombar *float64 `json:"rombar,omitempty" tf:"rombar,omitempty"`
}

type HostpciParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	Pcie *float64 `json:"pcie,omitempty" tf:"pcie,omitempty"`

	// +kubebuilder:validation:Optional
	Rombar *float64 `json:"rombar,omitempty" tf:"rombar,omitempty"`
}

type Ide0DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide0DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide0DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide0InitParameters struct {
	Cdrom []CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide0DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide0Observation struct {
	Cdrom []CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide0DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide0Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Ide0DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Ide1CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Ide1CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Ide1DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide1DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide1DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide1InitParameters struct {
	Cdrom []Ide1CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Ide1CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide1DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Ide1PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1Observation struct {
	Cdrom []Ide1CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Ide1CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide1DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Ide1PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Ide1CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Ide1CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Ide1DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Ide1PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide1PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide1PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide1PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide2CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide2CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide2CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide2CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Ide2CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Ide2CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Ide2DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide2DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide2DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide2InitParameters struct {
	Cdrom []Ide2CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Ide2CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide2DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Ide2PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide2Observation struct {
	Cdrom []Ide2CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Ide2CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide2DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Ide2PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide2Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Ide2CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Ide2CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Ide2DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Ide2PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide2PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide2PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide2PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide3CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide3CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide3CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide3CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Ide3CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Ide3CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Ide3DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide3DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide3DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide3InitParameters struct {
	Cdrom []Ide3CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Ide3CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide3DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Ide3PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide3Observation struct {
	Cdrom []Ide3CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Ide3CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Ide3DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Ide3PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide3Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Ide3CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Ide3CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Ide3DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Ide3PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Ide3PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide3PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Ide3PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type IdeInitParameters struct {
	Ide0 []Ide0InitParameters `json:"ide0,omitempty" tf:"ide0,omitempty"`

	Ide1 []Ide1InitParameters `json:"ide1,omitempty" tf:"ide1,omitempty"`

	Ide2 []Ide2InitParameters `json:"ide2,omitempty" tf:"ide2,omitempty"`

	Ide3 []Ide3InitParameters `json:"ide3,omitempty" tf:"ide3,omitempty"`
}

type IdeObservation struct {
	Ide0 []Ide0Observation `json:"ide0,omitempty" tf:"ide0,omitempty"`

	Ide1 []Ide1Observation `json:"ide1,omitempty" tf:"ide1,omitempty"`

	Ide2 []Ide2Observation `json:"ide2,omitempty" tf:"ide2,omitempty"`

	Ide3 []Ide3Observation `json:"ide3,omitempty" tf:"ide3,omitempty"`
}

type IdeParameters struct {

	// +kubebuilder:validation:Optional
	Ide0 []Ide0Parameters `json:"ide0,omitempty" tf:"ide0,omitempty"`

	// +kubebuilder:validation:Optional
	Ide1 []Ide1Parameters `json:"ide1,omitempty" tf:"ide1,omitempty"`

	// +kubebuilder:validation:Optional
	Ide2 []Ide2Parameters `json:"ide2,omitempty" tf:"ide2,omitempty"`

	// +kubebuilder:validation:Optional
	Ide3 []Ide3Parameters `json:"ide3,omitempty" tf:"ide3,omitempty"`
}

type NetworkInitParameters struct {
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	LinkDown *bool `json:"linkDown,omitempty" tf:"link_down,omitempty"`

	Macaddr *string `json:"macaddr,omitempty" tf:"macaddr,omitempty"`

	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	Queues *float64 `json:"queues,omitempty" tf:"queues,omitempty"`

	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`

	// VLAN tag.
	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NetworkObservation struct {
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	LinkDown *bool `json:"linkDown,omitempty" tf:"link_down,omitempty"`

	Macaddr *string `json:"macaddr,omitempty" tf:"macaddr,omitempty"`

	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	Queues *float64 `json:"queues,omitempty" tf:"queues,omitempty"`

	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`

	// VLAN tag.
	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	// +kubebuilder:validation:Optional
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// +kubebuilder:validation:Optional
	ID *float64 `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	LinkDown *bool `json:"linkDown,omitempty" tf:"link_down,omitempty"`

	// +kubebuilder:validation:Optional
	Macaddr *string `json:"macaddr,omitempty" tf:"macaddr,omitempty"`

	// +kubebuilder:validation:Optional
	Model *string `json:"model" tf:"model,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Optional
	Queues *float64 `json:"queues,omitempty" tf:"queues,omitempty"`

	// +kubebuilder:validation:Optional
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`

	// VLAN tag.
	// +kubebuilder:validation:Optional
	Tag *float64 `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type QemuInitParameters struct {

	// value in second to wait after some operations, useful if system is not fast or during i/o intensive parallel provider tasks
	AdditionalWait *float64 `json:"additionalWait,omitempty" tf:"additional_wait,omitempty"`

	Agent *float64 `json:"agent,omitempty" tf:"agent,omitempty"`

	// Timeout in seconds to keep trying to obtain an IP address from the guest agent one we have a connection.
	AgentTimeout *float64 `json:"agentTimeout,omitempty" tf:"agent_timeout,omitempty"`

	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
	AutomaticReboot *bool `json:"automaticReboot,omitempty" tf:"automatic_reboot,omitempty"`

	Balloon *float64 `json:"balloon,omitempty" tf:"balloon,omitempty"`

	// The VM bios, it can be seabios or ovmf
	Bios *string `json:"bios,omitempty" tf:"bios,omitempty"`

	// Boot order of the VM
	Boot *string `json:"boot,omitempty" tf:"boot,omitempty"`

	Bootdisk *string `json:"bootdisk,omitempty" tf:"bootdisk,omitempty"`

	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	CiWait *float64 `json:"ciWait,omitempty" tf:"ci_wait,omitempty"`

	Cicustom *string `json:"cicustom,omitempty" tf:"cicustom,omitempty"`

	CipasswordSecretRef *v1.SecretKeySelector `json:"cipasswordSecretRef,omitempty" tf:"-"`

	Ciupgrade *bool `json:"ciupgrade,omitempty" tf:"ciupgrade,omitempty"`

	Ciuser *string `json:"ciuser,omitempty" tf:"ciuser,omitempty"`

	Clone *string `json:"clone,omitempty" tf:"clone,omitempty"`

	// value in second to wait after a vm has been cloned, useful if system is not fast or during i/o intensive parallel provider tasks
	CloneWait *float64 `json:"cloneWait,omitempty" tf:"clone_wait,omitempty"`

	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// By default define SSH for provisioner info
	DefineConnectionInfo *bool `json:"defineConnectionInfo,omitempty" tf:"define_connection_info,omitempty"`

	// The VM description
	Desc *string `json:"desc,omitempty" tf:"desc,omitempty"`

	Disk []DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Disks []DisksInitParameters `json:"disks,omitempty" tf:"disks,omitempty"`

	Efidisk []EfidiskInitParameters `json:"efidisk,omitempty" tf:"efidisk,omitempty"`

	ForceCreate *bool `json:"forceCreate,omitempty" tf:"force_create,omitempty"`

	ForceRecreateOnChangeOf *string `json:"forceRecreateOnChangeOf,omitempty" tf:"force_recreate_on_change_of,omitempty"`

	FullClone *bool `json:"fullClone,omitempty" tf:"full_clone,omitempty"`

	Hagroup *string `json:"hagroup,omitempty" tf:"hagroup,omitempty"`

	Hastate *string `json:"hastate,omitempty" tf:"hastate,omitempty"`

	Hostpci []HostpciInitParameters `json:"hostpci,omitempty" tf:"hostpci,omitempty"`

	Hotplug *string `json:"hotplug,omitempty" tf:"hotplug,omitempty"`

	Ipconfig0 *string `json:"ipconfig0,omitempty" tf:"ipconfig0,omitempty"`

	Ipconfig1 *string `json:"ipconfig1,omitempty" tf:"ipconfig1,omitempty"`

	Ipconfig10 *string `json:"ipconfig10,omitempty" tf:"ipconfig10,omitempty"`

	Ipconfig11 *string `json:"ipconfig11,omitempty" tf:"ipconfig11,omitempty"`

	Ipconfig12 *string `json:"ipconfig12,omitempty" tf:"ipconfig12,omitempty"`

	Ipconfig13 *string `json:"ipconfig13,omitempty" tf:"ipconfig13,omitempty"`

	Ipconfig14 *string `json:"ipconfig14,omitempty" tf:"ipconfig14,omitempty"`

	Ipconfig15 *string `json:"ipconfig15,omitempty" tf:"ipconfig15,omitempty"`

	Ipconfig2 *string `json:"ipconfig2,omitempty" tf:"ipconfig2,omitempty"`

	Ipconfig3 *string `json:"ipconfig3,omitempty" tf:"ipconfig3,omitempty"`

	Ipconfig4 *string `json:"ipconfig4,omitempty" tf:"ipconfig4,omitempty"`

	Ipconfig5 *string `json:"ipconfig5,omitempty" tf:"ipconfig5,omitempty"`

	Ipconfig6 *string `json:"ipconfig6,omitempty" tf:"ipconfig6,omitempty"`

	Ipconfig7 *string `json:"ipconfig7,omitempty" tf:"ipconfig7,omitempty"`

	Ipconfig8 *string `json:"ipconfig8,omitempty" tf:"ipconfig8,omitempty"`

	Ipconfig9 *string `json:"ipconfig9,omitempty" tf:"ipconfig9,omitempty"`

	Kvm *bool `json:"kvm,omitempty" tf:"kvm,omitempty"`

	// Specifies the Qemu machine type.
	Machine *string `json:"machine,omitempty" tf:"machine,omitempty"`

	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	Numa *bool `json:"numa,omitempty" tf:"numa,omitempty"`

	// VM autostart on boot
	Onboot *bool `json:"onboot,omitempty" tf:"onboot,omitempty"`

	OsNetworkConfig *string `json:"osNetworkConfig,omitempty" tf:"os_network_config,omitempty"`

	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// Protect VM from being removed
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	Pxe *bool `json:"pxe,omitempty" tf:"pxe,omitempty"`

	QemuOs *string `json:"qemuOs,omitempty" tf:"qemu_os,omitempty"`

	// Use to pass instance ip address, redundant
	SSHForwardIP *string `json:"sshForwardIp,omitempty" tf:"ssh_forward_ip,omitempty"`

	SSHPrivateKeySecretRef *v1.SecretKeySelector `json:"sshPrivateKeySecretRef,omitempty" tf:"-"`

	SSHUser *string `json:"sshUser,omitempty" tf:"ssh_user,omitempty"`

	Scsihw *string `json:"scsihw,omitempty" tf:"scsihw,omitempty"`

	Searchdomain *string `json:"searchdomain,omitempty" tf:"searchdomain,omitempty"`

	Serial []SerialInitParameters `json:"serial,omitempty" tf:"serial,omitempty"`

	SkipIPv4 *bool `json:"skipIpv4,omitempty" tf:"skip_ipv4,omitempty"`

	SkipIPv6 *bool `json:"skipIpv6,omitempty" tf:"skip_ipv6,omitempty"`

	Smbios []SmbiosInitParameters `json:"smbios,omitempty" tf:"smbios,omitempty"`

	Sockets *float64 `json:"sockets,omitempty" tf:"sockets,omitempty"`

	Sshkeys *string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`

	// Startup order of the VM
	Startup *string `json:"startup,omitempty" tf:"startup,omitempty"`

	// Enable tablet mode in the VM
	Tablet *bool `json:"tablet,omitempty" tf:"tablet,omitempty"`

	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The node where VM goes to
	TargetNode *string `json:"targetNode,omitempty" tf:"target_node,omitempty"`

	// A list of nodes where VM goes to
	TargetNodes []*string `json:"targetNodes,omitempty" tf:"target_nodes,omitempty"`

	Usb []UsbInitParameters `json:"usb,omitempty" tf:"usb,omitempty"`

	// The state of the VM (running, started, stopped)
	VMState *string `json:"vmState,omitempty" tf:"vm_state,omitempty"`

	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`

	Vga []VgaInitParameters `json:"vga,omitempty" tf:"vga,omitempty"`

	// The VM identifier in proxmox (100-999999999)
	Vmid *float64 `json:"vmid,omitempty" tf:"vmid,omitempty"`
}

type QemuObservation struct {

	// value in second to wait after some operations, useful if system is not fast or during i/o intensive parallel provider tasks
	AdditionalWait *float64 `json:"additionalWait,omitempty" tf:"additional_wait,omitempty"`

	Agent *float64 `json:"agent,omitempty" tf:"agent,omitempty"`

	// Timeout in seconds to keep trying to obtain an IP address from the guest agent one we have a connection.
	AgentTimeout *float64 `json:"agentTimeout,omitempty" tf:"agent_timeout,omitempty"`

	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
	AutomaticReboot *bool `json:"automaticReboot,omitempty" tf:"automatic_reboot,omitempty"`

	Balloon *float64 `json:"balloon,omitempty" tf:"balloon,omitempty"`

	// The VM bios, it can be seabios or ovmf
	Bios *string `json:"bios,omitempty" tf:"bios,omitempty"`

	// Boot order of the VM
	Boot *string `json:"boot,omitempty" tf:"boot,omitempty"`

	Bootdisk *string `json:"bootdisk,omitempty" tf:"bootdisk,omitempty"`

	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	CiWait *float64 `json:"ciWait,omitempty" tf:"ci_wait,omitempty"`

	Cicustom *string `json:"cicustom,omitempty" tf:"cicustom,omitempty"`

	Ciupgrade *bool `json:"ciupgrade,omitempty" tf:"ciupgrade,omitempty"`

	Ciuser *string `json:"ciuser,omitempty" tf:"ciuser,omitempty"`

	Clone *string `json:"clone,omitempty" tf:"clone,omitempty"`

	// value in second to wait after a vm has been cloned, useful if system is not fast or during i/o intensive parallel provider tasks
	CloneWait *float64 `json:"cloneWait,omitempty" tf:"clone_wait,omitempty"`

	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Use to track vm ipv4 address
	DefaultIPv4Address *string `json:"defaultIpv4Address,omitempty" tf:"default_ipv4_address,omitempty"`

	// Use to track vm ipv6 address
	DefaultIPv6Address *string `json:"defaultIpv6Address,omitempty" tf:"default_ipv6_address,omitempty"`

	// By default define SSH for provisioner info
	DefineConnectionInfo *bool `json:"defineConnectionInfo,omitempty" tf:"define_connection_info,omitempty"`

	// The VM description
	Desc *string `json:"desc,omitempty" tf:"desc,omitempty"`

	Disk []DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Disks []DisksObservation `json:"disks,omitempty" tf:"disks,omitempty"`

	Efidisk []EfidiskObservation `json:"efidisk,omitempty" tf:"efidisk,omitempty"`

	ForceCreate *bool `json:"forceCreate,omitempty" tf:"force_create,omitempty"`

	ForceRecreateOnChangeOf *string `json:"forceRecreateOnChangeOf,omitempty" tf:"force_recreate_on_change_of,omitempty"`

	FullClone *bool `json:"fullClone,omitempty" tf:"full_clone,omitempty"`

	Hagroup *string `json:"hagroup,omitempty" tf:"hagroup,omitempty"`

	Hastate *string `json:"hastate,omitempty" tf:"hastate,omitempty"`

	Hostpci []HostpciObservation `json:"hostpci,omitempty" tf:"hostpci,omitempty"`

	Hotplug *string `json:"hotplug,omitempty" tf:"hotplug,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ipconfig0 *string `json:"ipconfig0,omitempty" tf:"ipconfig0,omitempty"`

	Ipconfig1 *string `json:"ipconfig1,omitempty" tf:"ipconfig1,omitempty"`

	Ipconfig10 *string `json:"ipconfig10,omitempty" tf:"ipconfig10,omitempty"`

	Ipconfig11 *string `json:"ipconfig11,omitempty" tf:"ipconfig11,omitempty"`

	Ipconfig12 *string `json:"ipconfig12,omitempty" tf:"ipconfig12,omitempty"`

	Ipconfig13 *string `json:"ipconfig13,omitempty" tf:"ipconfig13,omitempty"`

	Ipconfig14 *string `json:"ipconfig14,omitempty" tf:"ipconfig14,omitempty"`

	Ipconfig15 *string `json:"ipconfig15,omitempty" tf:"ipconfig15,omitempty"`

	Ipconfig2 *string `json:"ipconfig2,omitempty" tf:"ipconfig2,omitempty"`

	Ipconfig3 *string `json:"ipconfig3,omitempty" tf:"ipconfig3,omitempty"`

	Ipconfig4 *string `json:"ipconfig4,omitempty" tf:"ipconfig4,omitempty"`

	Ipconfig5 *string `json:"ipconfig5,omitempty" tf:"ipconfig5,omitempty"`

	Ipconfig6 *string `json:"ipconfig6,omitempty" tf:"ipconfig6,omitempty"`

	Ipconfig7 *string `json:"ipconfig7,omitempty" tf:"ipconfig7,omitempty"`

	Ipconfig8 *string `json:"ipconfig8,omitempty" tf:"ipconfig8,omitempty"`

	Ipconfig9 *string `json:"ipconfig9,omitempty" tf:"ipconfig9,omitempty"`

	Kvm *bool `json:"kvm,omitempty" tf:"kvm,omitempty"`

	LinkedVmid *float64 `json:"linkedVmid,omitempty" tf:"linked_vmid,omitempty"`

	// Specifies the Qemu machine type.
	Machine *string `json:"machine,omitempty" tf:"machine,omitempty"`

	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	Numa *bool `json:"numa,omitempty" tf:"numa,omitempty"`

	// VM autostart on boot
	Onboot *bool `json:"onboot,omitempty" tf:"onboot,omitempty"`

	OsNetworkConfig *string `json:"osNetworkConfig,omitempty" tf:"os_network_config,omitempty"`

	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// Protect VM from being removed
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	Pxe *bool `json:"pxe,omitempty" tf:"pxe,omitempty"`

	QemuOs *string `json:"qemuOs,omitempty" tf:"qemu_os,omitempty"`

	// Internal variable, true if any of the modified parameters requires a reboot to take effect.
	RebootRequired *bool `json:"rebootRequired,omitempty" tf:"reboot_required,omitempty"`

	// Use to pass instance ip address, redundant
	SSHForwardIP *string `json:"sshForwardIp,omitempty" tf:"ssh_forward_ip,omitempty"`

	// The ip address used for the ssh connection, this will prefer ipv4 over ipv6 if both are available
	SSHHost *string `json:"sshHost,omitempty" tf:"ssh_host,omitempty"`

	SSHPort *string `json:"sshPort,omitempty" tf:"ssh_port,omitempty"`

	SSHUser *string `json:"sshUser,omitempty" tf:"ssh_user,omitempty"`

	Scsihw *string `json:"scsihw,omitempty" tf:"scsihw,omitempty"`

	Searchdomain *string `json:"searchdomain,omitempty" tf:"searchdomain,omitempty"`

	Serial []SerialObservation `json:"serial,omitempty" tf:"serial,omitempty"`

	SkipIPv4 *bool `json:"skipIpv4,omitempty" tf:"skip_ipv4,omitempty"`

	SkipIPv6 *bool `json:"skipIpv6,omitempty" tf:"skip_ipv6,omitempty"`

	Smbios []SmbiosObservation `json:"smbios,omitempty" tf:"smbios,omitempty"`

	Sockets *float64 `json:"sockets,omitempty" tf:"sockets,omitempty"`

	Sshkeys *string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`

	// Startup order of the VM
	Startup *string `json:"startup,omitempty" tf:"startup,omitempty"`

	// Enable tablet mode in the VM
	Tablet *bool `json:"tablet,omitempty" tf:"tablet,omitempty"`

	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The node where VM goes to
	TargetNode *string `json:"targetNode,omitempty" tf:"target_node,omitempty"`

	// A list of nodes where VM goes to
	TargetNodes []*string `json:"targetNodes,omitempty" tf:"target_nodes,omitempty"`

	// Record unused disks in proxmox. This is intended to be read-only for now.
	UnusedDisk []UnusedDiskObservation `json:"unusedDisk,omitempty" tf:"unused_disk,omitempty"`

	Usb []UsbObservation `json:"usb,omitempty" tf:"usb,omitempty"`

	// The state of the VM (running, started, stopped)
	VMState *string `json:"vmState,omitempty" tf:"vm_state,omitempty"`

	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`

	Vga []VgaObservation `json:"vga,omitempty" tf:"vga,omitempty"`

	// The VM identifier in proxmox (100-999999999)
	Vmid *float64 `json:"vmid,omitempty" tf:"vmid,omitempty"`
}

type QemuParameters struct {

	// value in second to wait after some operations, useful if system is not fast or during i/o intensive parallel provider tasks
	// +kubebuilder:validation:Optional
	AdditionalWait *float64 `json:"additionalWait,omitempty" tf:"additional_wait,omitempty"`

	// +kubebuilder:validation:Optional
	Agent *float64 `json:"agent,omitempty" tf:"agent,omitempty"`

	// Timeout in seconds to keep trying to obtain an IP address from the guest agent one we have a connection.
	// +kubebuilder:validation:Optional
	AgentTimeout *float64 `json:"agentTimeout,omitempty" tf:"agent_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
	// +kubebuilder:validation:Optional
	AutomaticReboot *bool `json:"automaticReboot,omitempty" tf:"automatic_reboot,omitempty"`

	// +kubebuilder:validation:Optional
	Balloon *float64 `json:"balloon,omitempty" tf:"balloon,omitempty"`

	// The VM bios, it can be seabios or ovmf
	// +kubebuilder:validation:Optional
	Bios *string `json:"bios,omitempty" tf:"bios,omitempty"`

	// Boot order of the VM
	// +kubebuilder:validation:Optional
	Boot *string `json:"boot,omitempty" tf:"boot,omitempty"`

	// +kubebuilder:validation:Optional
	Bootdisk *string `json:"bootdisk,omitempty" tf:"bootdisk,omitempty"`

	// +kubebuilder:validation:Optional
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Optional
	CiWait *float64 `json:"ciWait,omitempty" tf:"ci_wait,omitempty"`

	// +kubebuilder:validation:Optional
	Cicustom *string `json:"cicustom,omitempty" tf:"cicustom,omitempty"`

	// +kubebuilder:validation:Optional
	CipasswordSecretRef *v1.SecretKeySelector `json:"cipasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Ciupgrade *bool `json:"ciupgrade,omitempty" tf:"ciupgrade,omitempty"`

	// +kubebuilder:validation:Optional
	Ciuser *string `json:"ciuser,omitempty" tf:"ciuser,omitempty"`

	// +kubebuilder:validation:Optional
	Clone *string `json:"clone,omitempty" tf:"clone,omitempty"`

	// value in second to wait after a vm has been cloned, useful if system is not fast or during i/o intensive parallel provider tasks
	// +kubebuilder:validation:Optional
	CloneWait *float64 `json:"cloneWait,omitempty" tf:"clone_wait,omitempty"`

	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// By default define SSH for provisioner info
	// +kubebuilder:validation:Optional
	DefineConnectionInfo *bool `json:"defineConnectionInfo,omitempty" tf:"define_connection_info,omitempty"`

	// The VM description
	// +kubebuilder:validation:Optional
	Desc *string `json:"desc,omitempty" tf:"desc,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Disks []DisksParameters `json:"disks,omitempty" tf:"disks,omitempty"`

	// +kubebuilder:validation:Optional
	Efidisk []EfidiskParameters `json:"efidisk,omitempty" tf:"efidisk,omitempty"`

	// +kubebuilder:validation:Optional
	ForceCreate *bool `json:"forceCreate,omitempty" tf:"force_create,omitempty"`

	// +kubebuilder:validation:Optional
	ForceRecreateOnChangeOf *string `json:"forceRecreateOnChangeOf,omitempty" tf:"force_recreate_on_change_of,omitempty"`

	// +kubebuilder:validation:Optional
	FullClone *bool `json:"fullClone,omitempty" tf:"full_clone,omitempty"`

	// +kubebuilder:validation:Optional
	Hagroup *string `json:"hagroup,omitempty" tf:"hagroup,omitempty"`

	// +kubebuilder:validation:Optional
	Hastate *string `json:"hastate,omitempty" tf:"hastate,omitempty"`

	// +kubebuilder:validation:Optional
	Hostpci []HostpciParameters `json:"hostpci,omitempty" tf:"hostpci,omitempty"`

	// +kubebuilder:validation:Optional
	Hotplug *string `json:"hotplug,omitempty" tf:"hotplug,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig0 *string `json:"ipconfig0,omitempty" tf:"ipconfig0,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig1 *string `json:"ipconfig1,omitempty" tf:"ipconfig1,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig10 *string `json:"ipconfig10,omitempty" tf:"ipconfig10,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig11 *string `json:"ipconfig11,omitempty" tf:"ipconfig11,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig12 *string `json:"ipconfig12,omitempty" tf:"ipconfig12,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig13 *string `json:"ipconfig13,omitempty" tf:"ipconfig13,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig14 *string `json:"ipconfig14,omitempty" tf:"ipconfig14,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig15 *string `json:"ipconfig15,omitempty" tf:"ipconfig15,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig2 *string `json:"ipconfig2,omitempty" tf:"ipconfig2,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig3 *string `json:"ipconfig3,omitempty" tf:"ipconfig3,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig4 *string `json:"ipconfig4,omitempty" tf:"ipconfig4,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig5 *string `json:"ipconfig5,omitempty" tf:"ipconfig5,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig6 *string `json:"ipconfig6,omitempty" tf:"ipconfig6,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig7 *string `json:"ipconfig7,omitempty" tf:"ipconfig7,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig8 *string `json:"ipconfig8,omitempty" tf:"ipconfig8,omitempty"`

	// +kubebuilder:validation:Optional
	Ipconfig9 *string `json:"ipconfig9,omitempty" tf:"ipconfig9,omitempty"`

	// +kubebuilder:validation:Optional
	Kvm *bool `json:"kvm,omitempty" tf:"kvm,omitempty"`

	// Specifies the Qemu machine type.
	// +kubebuilder:validation:Optional
	Machine *string `json:"machine,omitempty" tf:"machine,omitempty"`

	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// +kubebuilder:validation:Optional
	Nameserver *string `json:"nameserver,omitempty" tf:"nameserver,omitempty"`

	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	Numa *bool `json:"numa,omitempty" tf:"numa,omitempty"`

	// VM autostart on boot
	// +kubebuilder:validation:Optional
	Onboot *bool `json:"onboot,omitempty" tf:"onboot,omitempty"`

	// +kubebuilder:validation:Optional
	OsNetworkConfig *string `json:"osNetworkConfig,omitempty" tf:"os_network_config,omitempty"`

	// +kubebuilder:validation:Optional
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// Protect VM from being removed
	// +kubebuilder:validation:Optional
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	// +kubebuilder:validation:Optional
	Pxe *bool `json:"pxe,omitempty" tf:"pxe,omitempty"`

	// +kubebuilder:validation:Optional
	QemuOs *string `json:"qemuOs,omitempty" tf:"qemu_os,omitempty"`

	// Use to pass instance ip address, redundant
	// +kubebuilder:validation:Optional
	SSHForwardIP *string `json:"sshForwardIp,omitempty" tf:"ssh_forward_ip,omitempty"`

	// +kubebuilder:validation:Optional
	SSHPrivateKeySecretRef *v1.SecretKeySelector `json:"sshPrivateKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SSHUser *string `json:"sshUser,omitempty" tf:"ssh_user,omitempty"`

	// +kubebuilder:validation:Optional
	Scsihw *string `json:"scsihw,omitempty" tf:"scsihw,omitempty"`

	// +kubebuilder:validation:Optional
	Searchdomain *string `json:"searchdomain,omitempty" tf:"searchdomain,omitempty"`

	// +kubebuilder:validation:Optional
	Serial []SerialParameters `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	SkipIPv4 *bool `json:"skipIpv4,omitempty" tf:"skip_ipv4,omitempty"`

	// +kubebuilder:validation:Optional
	SkipIPv6 *bool `json:"skipIpv6,omitempty" tf:"skip_ipv6,omitempty"`

	// +kubebuilder:validation:Optional
	Smbios []SmbiosParameters `json:"smbios,omitempty" tf:"smbios,omitempty"`

	// +kubebuilder:validation:Optional
	Sockets *float64 `json:"sockets,omitempty" tf:"sockets,omitempty"`

	// +kubebuilder:validation:Optional
	Sshkeys *string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`

	// Startup order of the VM
	// +kubebuilder:validation:Optional
	Startup *string `json:"startup,omitempty" tf:"startup,omitempty"`

	// Enable tablet mode in the VM
	// +kubebuilder:validation:Optional
	Tablet *bool `json:"tablet,omitempty" tf:"tablet,omitempty"`

	// +kubebuilder:validation:Optional
	Tags *string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The node where VM goes to
	// +kubebuilder:validation:Optional
	TargetNode *string `json:"targetNode,omitempty" tf:"target_node,omitempty"`

	// A list of nodes where VM goes to
	// +kubebuilder:validation:Optional
	TargetNodes []*string `json:"targetNodes,omitempty" tf:"target_nodes,omitempty"`

	// +kubebuilder:validation:Optional
	Usb []UsbParameters `json:"usb,omitempty" tf:"usb,omitempty"`

	// The state of the VM (running, started, stopped)
	// +kubebuilder:validation:Optional
	VMState *string `json:"vmState,omitempty" tf:"vm_state,omitempty"`

	// +kubebuilder:validation:Optional
	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`

	// +kubebuilder:validation:Optional
	Vga []VgaParameters `json:"vga,omitempty" tf:"vga,omitempty"`

	// The VM identifier in proxmox (100-999999999)
	// +kubebuilder:validation:Optional
	Vmid *float64 `json:"vmid,omitempty" tf:"vmid,omitempty"`
}

type Sata0CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata0CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata0CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata0CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata0CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata0CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Sata0DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata0DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata0DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata0InitParameters struct {
	Cdrom []Sata0CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata0CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata0DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata0PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata0Observation struct {
	Cdrom []Sata0CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata0CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata0DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata0PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata0Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Sata0CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Sata0CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Sata0DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Sata0PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata0PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata0PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata0PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata1CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata1CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata1CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata1CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata1CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata1CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Sata1DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata1DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata1DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata1InitParameters struct {
	Cdrom []Sata1CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata1CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata1DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata1PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata1Observation struct {
	Cdrom []Sata1CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata1CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata1DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata1PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata1Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Sata1CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Sata1CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Sata1DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Sata1PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata1PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata1PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata1PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata2CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata2CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata2CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata2CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata2CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata2CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Sata2DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata2DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata2DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata2InitParameters struct {
	Cdrom []Sata2CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata2CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata2DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata2PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata2Observation struct {
	Cdrom []Sata2CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata2CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata2DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata2PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata2Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Sata2CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Sata2CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Sata2DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Sata2PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata2PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata2PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata2PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata3CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata3CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata3CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata3CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata3CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata3CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Sata3DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata3DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata3DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata3InitParameters struct {
	Cdrom []Sata3CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata3CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata3DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata3PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata3Observation struct {
	Cdrom []Sata3CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata3CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata3DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata3PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata3Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Sata3CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Sata3CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Sata3DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Sata3PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata3PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata3PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata3PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata4CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata4CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata4CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata4CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata4CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata4CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Sata4DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata4DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata4DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata4InitParameters struct {
	Cdrom []Sata4CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata4CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata4DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata4PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata4Observation struct {
	Cdrom []Sata4CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata4CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata4DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata4PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata4Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Sata4CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Sata4CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Sata4DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Sata4PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata4PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata4PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata4PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata5CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata5CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata5CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata5CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata5CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Sata5CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Sata5DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata5DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata5DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata5InitParameters struct {
	Cdrom []Sata5CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata5CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata5DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata5PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata5Observation struct {
	Cdrom []Sata5CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Sata5CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Sata5DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Sata5PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata5Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Sata5CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Sata5CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Sata5DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Sata5PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Sata5PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata5PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Sata5PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type SataInitParameters struct {
	Sata0 []Sata0InitParameters `json:"sata0,omitempty" tf:"sata0,omitempty"`

	Sata1 []Sata1InitParameters `json:"sata1,omitempty" tf:"sata1,omitempty"`

	Sata2 []Sata2InitParameters `json:"sata2,omitempty" tf:"sata2,omitempty"`

	Sata3 []Sata3InitParameters `json:"sata3,omitempty" tf:"sata3,omitempty"`

	Sata4 []Sata4InitParameters `json:"sata4,omitempty" tf:"sata4,omitempty"`

	Sata5 []Sata5InitParameters `json:"sata5,omitempty" tf:"sata5,omitempty"`
}

type SataObservation struct {
	Sata0 []Sata0Observation `json:"sata0,omitempty" tf:"sata0,omitempty"`

	Sata1 []Sata1Observation `json:"sata1,omitempty" tf:"sata1,omitempty"`

	Sata2 []Sata2Observation `json:"sata2,omitempty" tf:"sata2,omitempty"`

	Sata3 []Sata3Observation `json:"sata3,omitempty" tf:"sata3,omitempty"`

	Sata4 []Sata4Observation `json:"sata4,omitempty" tf:"sata4,omitempty"`

	Sata5 []Sata5Observation `json:"sata5,omitempty" tf:"sata5,omitempty"`
}

type SataParameters struct {

	// +kubebuilder:validation:Optional
	Sata0 []Sata0Parameters `json:"sata0,omitempty" tf:"sata0,omitempty"`

	// +kubebuilder:validation:Optional
	Sata1 []Sata1Parameters `json:"sata1,omitempty" tf:"sata1,omitempty"`

	// +kubebuilder:validation:Optional
	Sata2 []Sata2Parameters `json:"sata2,omitempty" tf:"sata2,omitempty"`

	// +kubebuilder:validation:Optional
	Sata3 []Sata3Parameters `json:"sata3,omitempty" tf:"sata3,omitempty"`

	// +kubebuilder:validation:Optional
	Sata4 []Sata4Parameters `json:"sata4,omitempty" tf:"sata4,omitempty"`

	// +kubebuilder:validation:Optional
	Sata5 []Sata5Parameters `json:"sata5,omitempty" tf:"sata5,omitempty"`
}

type Scsi0CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi0CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi0CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi0CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi0CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi0CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi0DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi0DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi0DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi0InitParameters struct {
	Cdrom []Scsi0CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi0CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi0DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi0PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi0Observation struct {
	Cdrom []Scsi0CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi0CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi0DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi0PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi0Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi0CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi0CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi0DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi0PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi0PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi0PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi0PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi10CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi10CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi10CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi10CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi10CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi10CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi10DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi10DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi10DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi10InitParameters struct {
	Cdrom []Scsi10CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi10CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi10DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi10PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi10Observation struct {
	Cdrom []Scsi10CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi10CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi10DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi10PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi10Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi10CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi10CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi10DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi10PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi10PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi10PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi10PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi11CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi11CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi11CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi11CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi11CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi11CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi11DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi11DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi11DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi11InitParameters struct {
	Cdrom []Scsi11CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi11CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi11DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi11PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi11Observation struct {
	Cdrom []Scsi11CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi11CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi11DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi11PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi11Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi11CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi11CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi11DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi11PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi11PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi11PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi11PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi12CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi12CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi12CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi12CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi12CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi12CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi12DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi12DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi12DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi12InitParameters struct {
	Cdrom []Scsi12CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi12CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi12DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi12PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi12Observation struct {
	Cdrom []Scsi12CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi12CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi12DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi12PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi12Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi12CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi12CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi12DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi12PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi12PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi12PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi12PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi13CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi13CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi13CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi13CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi13CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi13CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi13DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi13DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi13DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi13InitParameters struct {
	Cdrom []Scsi13CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi13CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi13DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi13PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi13Observation struct {
	Cdrom []Scsi13CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi13CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi13DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi13PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi13Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi13CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi13CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi13DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi13PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi13PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi13PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi13PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi14CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi14CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi14CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi14CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi14CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi14CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi14DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi14DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi14DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi14InitParameters struct {
	Cdrom []Scsi14CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi14CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi14DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi14PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi14Observation struct {
	Cdrom []Scsi14CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi14CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi14DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi14PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi14Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi14CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi14CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi14DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi14PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi14PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi14PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi14PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi15CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi15CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi15CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi15CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi15CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi15CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi15DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi15DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi15DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi15InitParameters struct {
	Cdrom []Scsi15CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi15CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi15DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi15PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi15Observation struct {
	Cdrom []Scsi15CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi15CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi15DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi15PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi15Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi15CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi15CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi15DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi15PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi15PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi15PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi15PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi16CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi16CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi16CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi16CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi16CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi16CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi16DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi16DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi16DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi16InitParameters struct {
	Cdrom []Scsi16CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi16CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi16DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi16PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi16Observation struct {
	Cdrom []Scsi16CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi16CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi16DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi16PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi16Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi16CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi16CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi16DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi16PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi16PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi16PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi16PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi17CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi17CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi17CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi17CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi17CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi17CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi17DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi17DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi17DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi17InitParameters struct {
	Cdrom []Scsi17CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi17CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi17DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi17PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi17Observation struct {
	Cdrom []Scsi17CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi17CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi17DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi17PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi17Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi17CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi17CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi17DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi17PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi17PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi17PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi17PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi18CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi18CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi18CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi18CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi18CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi18CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi18DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi18DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi18DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi18InitParameters struct {
	Cdrom []Scsi18CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi18CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi18DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi18PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi18Observation struct {
	Cdrom []Scsi18CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi18CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi18DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi18PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi18Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi18CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi18CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi18DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi18PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi18PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi18PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi18PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi19CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi19CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi19CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi19CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi19CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi19CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi19DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi19DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi19DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi19InitParameters struct {
	Cdrom []Scsi19CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi19CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi19DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi19PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi19Observation struct {
	Cdrom []Scsi19CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi19CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi19DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi19PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi19Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi19CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi19CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi19DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi19PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi19PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi19PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi19PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi1CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi1CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi1CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi1CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi1CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi1CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi1DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi1DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi1DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi1InitParameters struct {
	Cdrom []Scsi1CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi1CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi1DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi1PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi1Observation struct {
	Cdrom []Scsi1CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi1CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi1DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi1PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi1Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi1CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi1CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi1DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi1PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi1PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi1PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi1PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi20CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi20CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi20CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi20CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi20CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi20CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi20DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi20DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi20DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi20InitParameters struct {
	Cdrom []Scsi20CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi20CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi20DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi20PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi20Observation struct {
	Cdrom []Scsi20CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi20CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi20DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi20PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi20Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi20CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi20CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi20DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi20PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi20PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi20PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi20PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi21CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi21CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi21CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi21CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi21CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi21CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi21DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi21DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi21DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi21InitParameters struct {
	Cdrom []Scsi21CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi21CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi21DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi21PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi21Observation struct {
	Cdrom []Scsi21CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi21CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi21DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi21PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi21Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi21CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi21CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi21DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi21PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi21PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi21PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi21PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi22CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi22CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi22CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi22CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi22CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi22CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi22DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi22DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi22DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi22InitParameters struct {
	Cdrom []Scsi22CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi22CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi22DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi22PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi22Observation struct {
	Cdrom []Scsi22CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi22CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi22DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi22PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi22Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi22CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi22CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi22DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi22PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi22PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi22PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi22PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi23CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi23CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi23CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi23CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi23CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi23CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi23DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi23DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi23DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi23InitParameters struct {
	Cdrom []Scsi23CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi23CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi23DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi23PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi23Observation struct {
	Cdrom []Scsi23CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi23CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi23DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi23PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi23Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi23CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi23CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi23DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi23PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi23PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi23PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi23PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi24CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi24CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi24CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi24CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi24CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi24CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi24DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi24DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi24DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi24InitParameters struct {
	Cdrom []Scsi24CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi24CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi24DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi24PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi24Observation struct {
	Cdrom []Scsi24CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi24CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi24DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi24PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi24Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi24CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi24CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi24DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi24PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi24PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi24PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi24PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi25CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi25CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi25CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi25CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi25CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi25CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi25DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi25DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi25DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi25InitParameters struct {
	Cdrom []Scsi25CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi25CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi25DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi25PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi25Observation struct {
	Cdrom []Scsi25CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi25CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi25DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi25PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi25Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi25CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi25CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi25DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi25PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi25PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi25PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi25PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi26CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi26CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi26CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi26CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi26CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi26CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi26DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi26DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi26DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi26InitParameters struct {
	Cdrom []Scsi26CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi26CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi26DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi26PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi26Observation struct {
	Cdrom []Scsi26CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi26CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi26DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi26PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi26Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi26CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi26CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi26DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi26PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi26PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi26PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi26PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi27CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi27CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi27CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi27CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi27CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi27CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi27DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi27DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi27DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi27InitParameters struct {
	Cdrom []Scsi27CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi27CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi27DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi27PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi27Observation struct {
	Cdrom []Scsi27CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi27CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi27DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi27PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi27Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi27CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi27CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi27DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi27PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi27PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi27PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi27PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi28CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi28CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi28CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi28CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi28CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi28CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi28DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi28DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi28DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi28InitParameters struct {
	Cdrom []Scsi28CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi28CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi28DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi28PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi28Observation struct {
	Cdrom []Scsi28CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi28CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi28DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi28PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi28Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi28CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi28CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi28DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi28PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi28PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi28PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi28PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi29CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi29CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi29CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi29CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi29CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi29CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi29DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi29DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi29DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi29InitParameters struct {
	Cdrom []Scsi29CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi29CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi29DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi29PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi29Observation struct {
	Cdrom []Scsi29CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi29CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi29DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi29PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi29Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi29CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi29CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi29DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi29PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi29PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi29PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi29PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi2CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi2CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi2CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi2CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi2CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi2CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi2DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi2DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi2DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi2InitParameters struct {
	Cdrom []Scsi2CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi2CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi2DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi2PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi2Observation struct {
	Cdrom []Scsi2CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi2CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi2DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi2PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi2Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi2CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi2CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi2DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi2PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi2PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi2PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi2PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi30CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi30CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi30CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi30CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi30CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi30CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi30DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi30DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi30DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi30InitParameters struct {
	Cdrom []Scsi30CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi30CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi30DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi30PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi30Observation struct {
	Cdrom []Scsi30CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi30CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi30DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi30PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi30Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi30CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi30CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi30DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi30PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi30PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi30PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi30PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi3CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi3CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi3CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi3CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi3CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi3CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi3DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi3DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi3DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi3InitParameters struct {
	Cdrom []Scsi3CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi3CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi3DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi3PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi3Observation struct {
	Cdrom []Scsi3CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi3CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi3DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi3PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi3Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi3CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi3CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi3DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi3PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi3PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi3PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi3PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi4CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi4CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi4CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi4CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi4CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi4CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi4DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi4DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi4DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi4InitParameters struct {
	Cdrom []Scsi4CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi4CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi4DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi4PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi4Observation struct {
	Cdrom []Scsi4CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi4CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi4DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi4PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi4Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi4CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi4CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi4DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi4PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi4PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi4PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi4PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi5CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi5CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi5CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi5CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi5CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi5CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi5DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi5DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi5DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi5InitParameters struct {
	Cdrom []Scsi5CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi5CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi5DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi5PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi5Observation struct {
	Cdrom []Scsi5CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi5CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi5DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi5PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi5Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi5CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi5CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi5DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi5PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi5PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi5PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi5PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi6CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi6CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi6CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi6CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi6CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi6CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi6DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi6DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi6DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi6InitParameters struct {
	Cdrom []Scsi6CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi6CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi6DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi6PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi6Observation struct {
	Cdrom []Scsi6CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi6CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi6DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi6PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi6Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi6CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi6CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi6DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi6PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi6PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi6PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi6PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi7CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi7CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi7CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi7CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi7CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi7CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi7DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi7DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi7DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi7InitParameters struct {
	Cdrom []Scsi7CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi7CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi7DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi7PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi7Observation struct {
	Cdrom []Scsi7CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi7CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi7DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi7PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi7Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi7CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi7CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi7DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi7PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi7PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi7PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi7PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi8CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi8CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi8CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi8CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi8CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi8CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi8DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi8DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi8DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi8InitParameters struct {
	Cdrom []Scsi8CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi8CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi8DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi8PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi8Observation struct {
	Cdrom []Scsi8CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi8CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi8DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi8PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi8Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi8CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi8CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi8DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi8PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi8PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi8PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi8PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi9CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi9CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi9CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi9CloudinitInitParameters struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi9CloudinitObservation struct {
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type Scsi9CloudinitParameters struct {

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`
}

type Scsi9DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi9DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi9DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi9InitParameters struct {
	Cdrom []Scsi9CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi9CloudinitInitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi9DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi9PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi9Observation struct {
	Cdrom []Scsi9CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Cloudinit []Scsi9CloudinitObservation `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	Disk []Scsi9DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Scsi9PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi9Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Scsi9CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Cloudinit []Scsi9CloudinitParameters `json:"cloudinit,omitempty" tf:"cloudinit,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Scsi9DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Scsi9PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Scsi9PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi9PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Scsi9PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Emulatessd *bool `json:"emulatessd,omitempty" tf:"emulatessd,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type ScsiInitParameters struct {
	Scsi0 []Scsi0InitParameters `json:"scsi0,omitempty" tf:"scsi0,omitempty"`

	Scsi1 []Scsi1InitParameters `json:"scsi1,omitempty" tf:"scsi1,omitempty"`

	Scsi10 []Scsi10InitParameters `json:"scsi10,omitempty" tf:"scsi10,omitempty"`

	Scsi11 []Scsi11InitParameters `json:"scsi11,omitempty" tf:"scsi11,omitempty"`

	Scsi12 []Scsi12InitParameters `json:"scsi12,omitempty" tf:"scsi12,omitempty"`

	Scsi13 []Scsi13InitParameters `json:"scsi13,omitempty" tf:"scsi13,omitempty"`

	Scsi14 []Scsi14InitParameters `json:"scsi14,omitempty" tf:"scsi14,omitempty"`

	Scsi15 []Scsi15InitParameters `json:"scsi15,omitempty" tf:"scsi15,omitempty"`

	Scsi16 []Scsi16InitParameters `json:"scsi16,omitempty" tf:"scsi16,omitempty"`

	Scsi17 []Scsi17InitParameters `json:"scsi17,omitempty" tf:"scsi17,omitempty"`

	Scsi18 []Scsi18InitParameters `json:"scsi18,omitempty" tf:"scsi18,omitempty"`

	Scsi19 []Scsi19InitParameters `json:"scsi19,omitempty" tf:"scsi19,omitempty"`

	Scsi2 []Scsi2InitParameters `json:"scsi2,omitempty" tf:"scsi2,omitempty"`

	Scsi20 []Scsi20InitParameters `json:"scsi20,omitempty" tf:"scsi20,omitempty"`

	Scsi21 []Scsi21InitParameters `json:"scsi21,omitempty" tf:"scsi21,omitempty"`

	Scsi22 []Scsi22InitParameters `json:"scsi22,omitempty" tf:"scsi22,omitempty"`

	Scsi23 []Scsi23InitParameters `json:"scsi23,omitempty" tf:"scsi23,omitempty"`

	Scsi24 []Scsi24InitParameters `json:"scsi24,omitempty" tf:"scsi24,omitempty"`

	Scsi25 []Scsi25InitParameters `json:"scsi25,omitempty" tf:"scsi25,omitempty"`

	Scsi26 []Scsi26InitParameters `json:"scsi26,omitempty" tf:"scsi26,omitempty"`

	Scsi27 []Scsi27InitParameters `json:"scsi27,omitempty" tf:"scsi27,omitempty"`

	Scsi28 []Scsi28InitParameters `json:"scsi28,omitempty" tf:"scsi28,omitempty"`

	Scsi29 []Scsi29InitParameters `json:"scsi29,omitempty" tf:"scsi29,omitempty"`

	Scsi3 []Scsi3InitParameters `json:"scsi3,omitempty" tf:"scsi3,omitempty"`

	Scsi30 []Scsi30InitParameters `json:"scsi30,omitempty" tf:"scsi30,omitempty"`

	Scsi4 []Scsi4InitParameters `json:"scsi4,omitempty" tf:"scsi4,omitempty"`

	Scsi5 []Scsi5InitParameters `json:"scsi5,omitempty" tf:"scsi5,omitempty"`

	Scsi6 []Scsi6InitParameters `json:"scsi6,omitempty" tf:"scsi6,omitempty"`

	Scsi7 []Scsi7InitParameters `json:"scsi7,omitempty" tf:"scsi7,omitempty"`

	Scsi8 []Scsi8InitParameters `json:"scsi8,omitempty" tf:"scsi8,omitempty"`

	Scsi9 []Scsi9InitParameters `json:"scsi9,omitempty" tf:"scsi9,omitempty"`
}

type ScsiObservation struct {
	Scsi0 []Scsi0Observation `json:"scsi0,omitempty" tf:"scsi0,omitempty"`

	Scsi1 []Scsi1Observation `json:"scsi1,omitempty" tf:"scsi1,omitempty"`

	Scsi10 []Scsi10Observation `json:"scsi10,omitempty" tf:"scsi10,omitempty"`

	Scsi11 []Scsi11Observation `json:"scsi11,omitempty" tf:"scsi11,omitempty"`

	Scsi12 []Scsi12Observation `json:"scsi12,omitempty" tf:"scsi12,omitempty"`

	Scsi13 []Scsi13Observation `json:"scsi13,omitempty" tf:"scsi13,omitempty"`

	Scsi14 []Scsi14Observation `json:"scsi14,omitempty" tf:"scsi14,omitempty"`

	Scsi15 []Scsi15Observation `json:"scsi15,omitempty" tf:"scsi15,omitempty"`

	Scsi16 []Scsi16Observation `json:"scsi16,omitempty" tf:"scsi16,omitempty"`

	Scsi17 []Scsi17Observation `json:"scsi17,omitempty" tf:"scsi17,omitempty"`

	Scsi18 []Scsi18Observation `json:"scsi18,omitempty" tf:"scsi18,omitempty"`

	Scsi19 []Scsi19Observation `json:"scsi19,omitempty" tf:"scsi19,omitempty"`

	Scsi2 []Scsi2Observation `json:"scsi2,omitempty" tf:"scsi2,omitempty"`

	Scsi20 []Scsi20Observation `json:"scsi20,omitempty" tf:"scsi20,omitempty"`

	Scsi21 []Scsi21Observation `json:"scsi21,omitempty" tf:"scsi21,omitempty"`

	Scsi22 []Scsi22Observation `json:"scsi22,omitempty" tf:"scsi22,omitempty"`

	Scsi23 []Scsi23Observation `json:"scsi23,omitempty" tf:"scsi23,omitempty"`

	Scsi24 []Scsi24Observation `json:"scsi24,omitempty" tf:"scsi24,omitempty"`

	Scsi25 []Scsi25Observation `json:"scsi25,omitempty" tf:"scsi25,omitempty"`

	Scsi26 []Scsi26Observation `json:"scsi26,omitempty" tf:"scsi26,omitempty"`

	Scsi27 []Scsi27Observation `json:"scsi27,omitempty" tf:"scsi27,omitempty"`

	Scsi28 []Scsi28Observation `json:"scsi28,omitempty" tf:"scsi28,omitempty"`

	Scsi29 []Scsi29Observation `json:"scsi29,omitempty" tf:"scsi29,omitempty"`

	Scsi3 []Scsi3Observation `json:"scsi3,omitempty" tf:"scsi3,omitempty"`

	Scsi30 []Scsi30Observation `json:"scsi30,omitempty" tf:"scsi30,omitempty"`

	Scsi4 []Scsi4Observation `json:"scsi4,omitempty" tf:"scsi4,omitempty"`

	Scsi5 []Scsi5Observation `json:"scsi5,omitempty" tf:"scsi5,omitempty"`

	Scsi6 []Scsi6Observation `json:"scsi6,omitempty" tf:"scsi6,omitempty"`

	Scsi7 []Scsi7Observation `json:"scsi7,omitempty" tf:"scsi7,omitempty"`

	Scsi8 []Scsi8Observation `json:"scsi8,omitempty" tf:"scsi8,omitempty"`

	Scsi9 []Scsi9Observation `json:"scsi9,omitempty" tf:"scsi9,omitempty"`
}

type ScsiParameters struct {

	// +kubebuilder:validation:Optional
	Scsi0 []Scsi0Parameters `json:"scsi0,omitempty" tf:"scsi0,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi1 []Scsi1Parameters `json:"scsi1,omitempty" tf:"scsi1,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi10 []Scsi10Parameters `json:"scsi10,omitempty" tf:"scsi10,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi11 []Scsi11Parameters `json:"scsi11,omitempty" tf:"scsi11,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi12 []Scsi12Parameters `json:"scsi12,omitempty" tf:"scsi12,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi13 []Scsi13Parameters `json:"scsi13,omitempty" tf:"scsi13,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi14 []Scsi14Parameters `json:"scsi14,omitempty" tf:"scsi14,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi15 []Scsi15Parameters `json:"scsi15,omitempty" tf:"scsi15,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi16 []Scsi16Parameters `json:"scsi16,omitempty" tf:"scsi16,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi17 []Scsi17Parameters `json:"scsi17,omitempty" tf:"scsi17,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi18 []Scsi18Parameters `json:"scsi18,omitempty" tf:"scsi18,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi19 []Scsi19Parameters `json:"scsi19,omitempty" tf:"scsi19,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi2 []Scsi2Parameters `json:"scsi2,omitempty" tf:"scsi2,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi20 []Scsi20Parameters `json:"scsi20,omitempty" tf:"scsi20,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi21 []Scsi21Parameters `json:"scsi21,omitempty" tf:"scsi21,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi22 []Scsi22Parameters `json:"scsi22,omitempty" tf:"scsi22,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi23 []Scsi23Parameters `json:"scsi23,omitempty" tf:"scsi23,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi24 []Scsi24Parameters `json:"scsi24,omitempty" tf:"scsi24,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi25 []Scsi25Parameters `json:"scsi25,omitempty" tf:"scsi25,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi26 []Scsi26Parameters `json:"scsi26,omitempty" tf:"scsi26,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi27 []Scsi27Parameters `json:"scsi27,omitempty" tf:"scsi27,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi28 []Scsi28Parameters `json:"scsi28,omitempty" tf:"scsi28,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi29 []Scsi29Parameters `json:"scsi29,omitempty" tf:"scsi29,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi3 []Scsi3Parameters `json:"scsi3,omitempty" tf:"scsi3,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi30 []Scsi30Parameters `json:"scsi30,omitempty" tf:"scsi30,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi4 []Scsi4Parameters `json:"scsi4,omitempty" tf:"scsi4,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi5 []Scsi5Parameters `json:"scsi5,omitempty" tf:"scsi5,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi6 []Scsi6Parameters `json:"scsi6,omitempty" tf:"scsi6,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi7 []Scsi7Parameters `json:"scsi7,omitempty" tf:"scsi7,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi8 []Scsi8Parameters `json:"scsi8,omitempty" tf:"scsi8,omitempty"`

	// +kubebuilder:validation:Optional
	Scsi9 []Scsi9Parameters `json:"scsi9,omitempty" tf:"scsi9,omitempty"`
}

type SerialInitParameters struct {
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SerialObservation struct {
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SerialParameters struct {

	// +kubebuilder:validation:Optional
	ID *float64 `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SmbiosInitParameters struct {
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	Manufacturer *string `json:"manufacturer,omitempty" tf:"manufacturer,omitempty"`

	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SmbiosObservation struct {
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	Manufacturer *string `json:"manufacturer,omitempty" tf:"manufacturer,omitempty"`

	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SmbiosParameters struct {

	// +kubebuilder:validation:Optional
	Family *string `json:"family,omitempty" tf:"family,omitempty"`

	// +kubebuilder:validation:Optional
	Manufacturer *string `json:"manufacturer,omitempty" tf:"manufacturer,omitempty"`

	// +kubebuilder:validation:Optional
	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type UnusedDiskInitParameters struct {
}

type UnusedDiskObservation struct {
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	Slot *float64 `json:"slot,omitempty" tf:"slot,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`
}

type UnusedDiskParameters struct {
}

type UsbInitParameters struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Usb3 *bool `json:"usb3,omitempty" tf:"usb3,omitempty"`
}

type UsbObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Usb3 *bool `json:"usb3,omitempty" tf:"usb3,omitempty"`
}

type UsbParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	Usb3 *bool `json:"usb3,omitempty" tf:"usb3,omitempty"`
}

type VgaInitParameters struct {
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VgaObservation struct {
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VgaParameters struct {

	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Virtio0CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio0CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio0CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio0DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio0DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio0DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio0InitParameters struct {
	Cdrom []Virtio0CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio0DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio0PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio0Observation struct {
	Cdrom []Virtio0CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio0DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio0PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio0Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio0CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio0DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio0PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio0PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio0PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio0PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio10CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio10CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio10CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio10DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio10DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio10DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio10InitParameters struct {
	Cdrom []Virtio10CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio10DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio10PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio10Observation struct {
	Cdrom []Virtio10CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio10DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio10PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio10Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio10CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio10DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio10PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio10PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio10PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio10PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio11CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio11CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio11CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio11DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio11DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio11DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio11InitParameters struct {
	Cdrom []Virtio11CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio11DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio11PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio11Observation struct {
	Cdrom []Virtio11CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio11DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio11PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio11Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio11CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio11DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio11PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio11PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio11PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio11PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio12CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio12CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio12CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio12DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio12DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio12DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio12InitParameters struct {
	Cdrom []Virtio12CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio12DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio12PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio12Observation struct {
	Cdrom []Virtio12CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio12DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio12PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio12Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio12CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio12DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio12PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio12PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio12PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio12PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio13CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio13CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio13CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio13DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio13DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio13DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio13InitParameters struct {
	Cdrom []Virtio13CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio13DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio13PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio13Observation struct {
	Cdrom []Virtio13CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio13DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio13PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio13Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio13CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio13DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio13PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio13PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio13PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio13PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio14CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio14CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio14CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio14DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio14DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio14DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio14InitParameters struct {
	Cdrom []Virtio14CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio14DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio14PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio14Observation struct {
	Cdrom []Virtio14CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio14DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio14PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio14Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio14CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio14DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio14PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio14PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio14PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio14PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio15CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio15CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio15CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio15DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio15DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio15DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio15InitParameters struct {
	Cdrom []Virtio15CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio15DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio15PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio15Observation struct {
	Cdrom []Virtio15CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio15DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio15PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio15Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio15CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio15DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio15PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio15PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio15PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio15PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio1CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio1CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio1CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio1DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio1DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio1DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio1InitParameters struct {
	Cdrom []Virtio1CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio1DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio1PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio1Observation struct {
	Cdrom []Virtio1CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio1DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio1PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio1Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio1CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio1DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio1PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio1PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio1PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio1PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio2CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio2CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio2CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio2DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio2DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio2DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio2InitParameters struct {
	Cdrom []Virtio2CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio2DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio2PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio2Observation struct {
	Cdrom []Virtio2CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio2DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio2PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio2Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio2CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio2DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio2PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio2PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio2PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio2PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio3CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio3CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio3CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio3DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio3DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio3DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio3InitParameters struct {
	Cdrom []Virtio3CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio3DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio3PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio3Observation struct {
	Cdrom []Virtio3CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio3DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio3PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio3Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio3CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio3DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio3PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio3PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio3PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio3PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio4CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio4CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio4CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio4DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio4DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio4DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio4InitParameters struct {
	Cdrom []Virtio4CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio4DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio4PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio4Observation struct {
	Cdrom []Virtio4CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio4DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio4PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio4Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio4CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio4DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio4PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio4PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio4PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio4PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio5CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio5CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio5CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio5DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio5DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio5DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio5InitParameters struct {
	Cdrom []Virtio5CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio5DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio5PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio5Observation struct {
	Cdrom []Virtio5CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio5DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio5PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio5Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio5CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio5DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio5PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio5PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio5PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio5PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio6CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio6CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio6CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio6DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio6DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio6DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio6InitParameters struct {
	Cdrom []Virtio6CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio6DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio6PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio6Observation struct {
	Cdrom []Virtio6CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio6DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio6PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio6Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio6CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio6DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio6PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio6PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio6PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio6PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio7CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio7CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio7CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio7DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio7DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio7DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio7InitParameters struct {
	Cdrom []Virtio7CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio7DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio7PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio7Observation struct {
	Cdrom []Virtio7CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio7DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio7PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio7Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio7CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio7DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio7PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio7PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio7PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio7PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio8CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio8CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio8CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio8DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio8DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio8DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio8InitParameters struct {
	Cdrom []Virtio8CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio8DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio8PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio8Observation struct {
	Cdrom []Virtio8CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio8DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio8PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio8Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio8CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio8DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio8PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio8PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio8PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio8PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio9CdromInitParameters struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio9CdromObservation struct {
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio9CdromParameters struct {

	// +kubebuilder:validation:Optional
	Iso *string `json:"iso,omitempty" tf:"iso,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio9DiskInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio9DiskObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	LinkedDiskID *float64 `json:"linkedDiskId,omitempty" tf:"linked_disk_id,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio9DiskParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio9InitParameters struct {
	Cdrom []Virtio9CdromInitParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio9DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio9PassthroughInitParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio9Observation struct {
	Cdrom []Virtio9CdromObservation `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	Disk []Virtio9DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	Passthrough []Virtio9PassthroughObservation `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio9Parameters struct {

	// +kubebuilder:validation:Optional
	Cdrom []Virtio9CdromParameters `json:"cdrom,omitempty" tf:"cdrom,omitempty"`

	// +kubebuilder:validation:Optional
	Disk []Virtio9DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Passthrough []Virtio9PassthroughParameters `json:"passthrough,omitempty" tf:"passthrough,omitempty"`
}

type Virtio9PassthroughInitParameters struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio9PassthroughObservation struct {
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	File *string `json:"file,omitempty" tf:"file,omitempty"`

	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type Virtio9PassthroughParameters struct {

	// +kubebuilder:validation:Optional
	Asyncio *string `json:"asyncio,omitempty" tf:"asyncio,omitempty"`

	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	Cache *string `json:"cache,omitempty" tf:"cache,omitempty"`

	// +kubebuilder:validation:Optional
	Discard *bool `json:"discard,omitempty" tf:"discard,omitempty"`

	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurst *float64 `json:"iopsRBurst,omitempty" tf:"iops_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRBurstLength *float64 `json:"iopsRBurstLength,omitempty" tf:"iops_r_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsRConcurrent *float64 `json:"iopsRConcurrent,omitempty" tf:"iops_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurst *float64 `json:"iopsWrBurst,omitempty" tf:"iops_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrBurstLength *float64 `json:"iopsWrBurstLength,omitempty" tf:"iops_wr_burst_length,omitempty"`

	// +kubebuilder:validation:Optional
	IopsWrConcurrent *float64 `json:"iopsWrConcurrent,omitempty" tf:"iops_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Iothread *bool `json:"iothread,omitempty" tf:"iothread,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRBurst *float64 `json:"mbpsRBurst,omitempty" tf:"mbps_r_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsRConcurrent *float64 `json:"mbpsRConcurrent,omitempty" tf:"mbps_r_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrBurst *float64 `json:"mbpsWrBurst,omitempty" tf:"mbps_wr_burst,omitempty"`

	// +kubebuilder:validation:Optional
	MbpsWrConcurrent *float64 `json:"mbpsWrConcurrent,omitempty" tf:"mbps_wr_concurrent,omitempty"`

	// +kubebuilder:validation:Optional
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type VirtioInitParameters struct {
	Virtio0 []Virtio0InitParameters `json:"virtio0,omitempty" tf:"virtio0,omitempty"`

	Virtio1 []Virtio1InitParameters `json:"virtio1,omitempty" tf:"virtio1,omitempty"`

	Virtio10 []Virtio10InitParameters `json:"virtio10,omitempty" tf:"virtio10,omitempty"`

	Virtio11 []Virtio11InitParameters `json:"virtio11,omitempty" tf:"virtio11,omitempty"`

	Virtio12 []Virtio12InitParameters `json:"virtio12,omitempty" tf:"virtio12,omitempty"`

	Virtio13 []Virtio13InitParameters `json:"virtio13,omitempty" tf:"virtio13,omitempty"`

	Virtio14 []Virtio14InitParameters `json:"virtio14,omitempty" tf:"virtio14,omitempty"`

	Virtio15 []Virtio15InitParameters `json:"virtio15,omitempty" tf:"virtio15,omitempty"`

	Virtio2 []Virtio2InitParameters `json:"virtio2,omitempty" tf:"virtio2,omitempty"`

	Virtio3 []Virtio3InitParameters `json:"virtio3,omitempty" tf:"virtio3,omitempty"`

	Virtio4 []Virtio4InitParameters `json:"virtio4,omitempty" tf:"virtio4,omitempty"`

	Virtio5 []Virtio5InitParameters `json:"virtio5,omitempty" tf:"virtio5,omitempty"`

	Virtio6 []Virtio6InitParameters `json:"virtio6,omitempty" tf:"virtio6,omitempty"`

	Virtio7 []Virtio7InitParameters `json:"virtio7,omitempty" tf:"virtio7,omitempty"`

	Virtio8 []Virtio8InitParameters `json:"virtio8,omitempty" tf:"virtio8,omitempty"`

	Virtio9 []Virtio9InitParameters `json:"virtio9,omitempty" tf:"virtio9,omitempty"`
}

type VirtioObservation struct {
	Virtio0 []Virtio0Observation `json:"virtio0,omitempty" tf:"virtio0,omitempty"`

	Virtio1 []Virtio1Observation `json:"virtio1,omitempty" tf:"virtio1,omitempty"`

	Virtio10 []Virtio10Observation `json:"virtio10,omitempty" tf:"virtio10,omitempty"`

	Virtio11 []Virtio11Observation `json:"virtio11,omitempty" tf:"virtio11,omitempty"`

	Virtio12 []Virtio12Observation `json:"virtio12,omitempty" tf:"virtio12,omitempty"`

	Virtio13 []Virtio13Observation `json:"virtio13,omitempty" tf:"virtio13,omitempty"`

	Virtio14 []Virtio14Observation `json:"virtio14,omitempty" tf:"virtio14,omitempty"`

	Virtio15 []Virtio15Observation `json:"virtio15,omitempty" tf:"virtio15,omitempty"`

	Virtio2 []Virtio2Observation `json:"virtio2,omitempty" tf:"virtio2,omitempty"`

	Virtio3 []Virtio3Observation `json:"virtio3,omitempty" tf:"virtio3,omitempty"`

	Virtio4 []Virtio4Observation `json:"virtio4,omitempty" tf:"virtio4,omitempty"`

	Virtio5 []Virtio5Observation `json:"virtio5,omitempty" tf:"virtio5,omitempty"`

	Virtio6 []Virtio6Observation `json:"virtio6,omitempty" tf:"virtio6,omitempty"`

	Virtio7 []Virtio7Observation `json:"virtio7,omitempty" tf:"virtio7,omitempty"`

	Virtio8 []Virtio8Observation `json:"virtio8,omitempty" tf:"virtio8,omitempty"`

	Virtio9 []Virtio9Observation `json:"virtio9,omitempty" tf:"virtio9,omitempty"`
}

type VirtioParameters struct {

	// +kubebuilder:validation:Optional
	Virtio0 []Virtio0Parameters `json:"virtio0,omitempty" tf:"virtio0,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio1 []Virtio1Parameters `json:"virtio1,omitempty" tf:"virtio1,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio10 []Virtio10Parameters `json:"virtio10,omitempty" tf:"virtio10,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio11 []Virtio11Parameters `json:"virtio11,omitempty" tf:"virtio11,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio12 []Virtio12Parameters `json:"virtio12,omitempty" tf:"virtio12,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio13 []Virtio13Parameters `json:"virtio13,omitempty" tf:"virtio13,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio14 []Virtio14Parameters `json:"virtio14,omitempty" tf:"virtio14,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio15 []Virtio15Parameters `json:"virtio15,omitempty" tf:"virtio15,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio2 []Virtio2Parameters `json:"virtio2,omitempty" tf:"virtio2,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio3 []Virtio3Parameters `json:"virtio3,omitempty" tf:"virtio3,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio4 []Virtio4Parameters `json:"virtio4,omitempty" tf:"virtio4,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio5 []Virtio5Parameters `json:"virtio5,omitempty" tf:"virtio5,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio6 []Virtio6Parameters `json:"virtio6,omitempty" tf:"virtio6,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio7 []Virtio7Parameters `json:"virtio7,omitempty" tf:"virtio7,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio8 []Virtio8Parameters `json:"virtio8,omitempty" tf:"virtio8,omitempty"`

	// +kubebuilder:validation:Optional
	Virtio9 []Virtio9Parameters `json:"virtio9,omitempty" tf:"virtio9,omitempty"`
}

// QemuSpec defines the desired state of Qemu
type QemuSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QemuParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QemuInitParameters `json:"initProvider,omitempty"`
}

// QemuStatus defines the observed state of Qemu.
type QemuStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QemuObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Qemu is the Schema for the Qemus API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmox}
type Qemu struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QemuSpec   `json:"spec"`
	Status            QemuStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QemuList contains a list of Qemus
type QemuList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Qemu `json:"items"`
}

// Repository type metadata.
var (
	Qemu_Kind             = "Qemu"
	Qemu_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Qemu_Kind}.String()
	Qemu_KindAPIVersion   = Qemu_Kind + "." + CRDGroupVersion.String()
	Qemu_GroupVersionKind = CRDGroupVersion.WithKind(Qemu_Kind)
)

func init() {
	SchemeBuilder.Register(&Qemu{}, &QemuList{})
}
