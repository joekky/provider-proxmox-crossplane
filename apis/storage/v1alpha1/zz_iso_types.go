// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IsoInitParameters struct {
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	ChecksumAlgorithm *string `json:"checksumAlgorithm,omitempty" tf:"checksum_algorithm,omitempty"`

	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	PveNode *string `json:"pveNode,omitempty" tf:"pve_node,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type IsoObservation struct {
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	ChecksumAlgorithm *string `json:"checksumAlgorithm,omitempty" tf:"checksum_algorithm,omitempty"`

	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PveNode *string `json:"pveNode,omitempty" tf:"pve_node,omitempty"`

	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type IsoParameters struct {

	// +kubebuilder:validation:Optional
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// +kubebuilder:validation:Optional
	ChecksumAlgorithm *string `json:"checksumAlgorithm,omitempty" tf:"checksum_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	PveNode *string `json:"pveNode,omitempty" tf:"pve_node,omitempty"`

	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// IsoSpec defines the desired state of Iso
type IsoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IsoParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IsoInitParameters `json:"initProvider,omitempty"`
}

// IsoStatus defines the observed state of Iso.
type IsoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IsoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Iso is the Schema for the Isos API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmox}
type Iso struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filename) || (has(self.initProvider) && has(self.initProvider.filename))",message="spec.forProvider.filename is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pveNode) || (has(self.initProvider) && has(self.initProvider.pveNode))",message="spec.forProvider.pveNode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   IsoSpec   `json:"spec"`
	Status IsoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IsoList contains a list of Isos
type IsoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Iso `json:"items"`
}

// Repository type metadata.
var (
	Iso_Kind             = "Iso"
	Iso_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Iso_Kind}.String()
	Iso_KindAPIVersion   = Iso_Kind + "." + CRDGroupVersion.String()
	Iso_GroupVersionKind = CRDGroupVersion.WithKind(Iso_Kind)
)

func init() {
	SchemeBuilder.Register(&Iso{}, &IsoList{})
}
