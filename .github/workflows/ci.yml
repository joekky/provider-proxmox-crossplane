name: Build and Push Multi-arch Artifacts

on:
  push:
    branches: ['main', 'master', 'release-*', 'method1-local-generated']
    tags: ['v*']

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      BUILD_REGISTRY: "ghcr.io/${{ github.repository }}"
      ARCH: "${{ matrix.arch }}"
      VERSION: "${{ github.ref_name }}"
      IMAGE_NAME: "ghcr.io/${{ github.repository }}/provider-proxmox-crossplane-${{ matrix.arch }}"
      REGISTRY_IMAGE: "ghcr.io/${{ github.repository }}/provider-proxmox-crossplane-${{ matrix.arch }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Crossplane CLI
        run: |
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv crossplane /usr/local/bin/
          chmod +x /usr/local/bin/crossplane

      - name: Verify Crossplane Installation
        run: |
          if ! command -v crossplane &> /dev/null; then
            echo "Crossplane CLI installation failed."
            exit 1
          fi
          crossplane --help

      - name: Build Provider Binary
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/bin/linux_${{ matrix.arch }}
          GOOS=linux GOARCH=${{ matrix.arch }} go build -o ${GITHUB_WORKSPACE}/bin/linux_${{ matrix.arch }}/provider ./cmd/provider

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cluster/images/provider-proxmox-crossplane/Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION }}
            ${{ env.REGISTRY_IMAGE }}:latest
          build-args: |
            TARGETOS=linux
            TARGETARCH=${{ matrix.arch }}

      - name: Wait for image to be available
        run: |
          timeout 60 bash -c 'until docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION }}; do sleep 5; done'

      - name: Package Provider
        run: |
          mkdir -p _output
          cd package
          
          # Pre-process crossplane.yaml
          envsubst < crossplane.yaml > crossplane.yaml.processed
          mv crossplane.yaml.processed crossplane.yaml
          
          # Build package
          crossplane xpkg build \
            --package-root . \
            --embed-runtime-image=${REGISTRY_IMAGE}:${VERSION} \
            -o ../_output/provider-proxmox-${ARCH}.xpkg
          
          # Verify package contents
          cd ../_output
          mkdir -p verify
          cd verify
          tar xf ../provider-proxmox-${ARCH}.xpkg
          if [ ! -f "package.yaml" ]; then
            echo "package.yaml is missing from the package"
            exit 1
          fi

      - name: Build and Push Provider Package
        if: github.event_name != 'pull_request'
        run: |
          # Update crossplane.yaml
          export VERSION=${{ env.VERSION }}
          export REGISTRY_IMAGE=${{ env.IMAGE_NAME }}
          envsubst < package/crossplane.yaml > package/crossplane.yaml.tmp
          mv package/crossplane.yaml.tmp package/crossplane.yaml

      - name: Debug - List /usr/local/bin
        run: ls -la /usr/local/bin/

      - name: Debug - Print Environment Variables
        run: env

      - name: Debug Package Build
        run: |
          cd package
          crossplane xpkg build --package-root . --verbose \
            -o ../_output/provider-proxmox-${{ matrix.arch }}.xpkg

      - name: Verify Package Structure
        run: |
          ls -la package/
          ls -la package/crds/

      - name: Verify Image
        run: |
          docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION }}

      - name: Verify Build Artifacts
        run: |
          ls -la _output/
          file _output/provider-proxmox-${ARCH}.xpkg

      - name: Debug Environment
        run: |
          echo "REGISTRY_IMAGE: ${REGISTRY_IMAGE}"
          echo "VERSION: ${VERSION}"
          echo "ARCH: ${ARCH}"
